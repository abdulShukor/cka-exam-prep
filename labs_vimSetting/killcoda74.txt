****

k run ng --image nginx --dry-run=client -o yaml  -- sleep 1d 
k run ng --image nginx --dry-run=client -o yaml --command -- sleep 1d

kubectl get secret database-data -n database-ns -o yaml
echo "c2VjcmV0Cg= | base64 -d 

For instance, in the version v1.20.4:
Major Version: 1
Minor Version: 20
Patch Version: 4

1.27.10: This part represents the major, minor, and patch version numbers of Kubernetes.
Major Version: 1
Minor Version: 27
Patch Version: 10
-1.1: This part seems to include additional information or metadata beyond the standard versioning scheme. 

k create clusterrole app-role-cka --verb '*' --resource '*'

   - command:
    - sh
    - -c
    - echo 'Mi Tv Is Good' && sleep 3600
k logs pods/application-pod log-reader-container | grep Error > poderrorlogs.txt. // specific logs not all 

kubectl port-forward pods/mongo-75f59d57f4-4nd6q 8000:80
kubectl port-forward deployment/mongo 8000:80
kubectl port-forward replicaset/mongo-75f59d57f4 8000:80
kubectl port-forward service/mongo 8000:80
Open another terminal and run curl http://localhost:8000
The kubectl port-forward command is used to forward local ports to a pod running in your Kubernetes cluster. The syntax you provided:


kubectl port-forward service/mongo 8000:80
This command forwards port 8000 on your local machine to port 80 of the mongo service in your Kubernetes cluster.
Here's what each part of the command means:
kubectl port-forward: This is the command to start port forwarding.
service/mongo: This specifies the Kubernetes service to which you want to forward the ports. In this case, it's the mongo service.
8000:80: This specifies the local port (8000) and the remote port (80) to which you want to forward traffic. Traffic sent to localhost:8000 on your local machine will be forwarded to port 80 of the mongo service in your Kubernetes cluster.
After running this command, any traffic directed to localhost:8000 on your local machine will be forwarded to the mongo service within your Kubernetes cluster.

Ascending Order: 1-10
Descending Order: 10-1

kubectl get pods -o wide -o custom-columns=IP_ADDRESS:.status.podIP | tac | grep -v "ADDRESS_TO_EXCLUDE"

echo -e "192.168.1.6\n192.168.1.5\n192.168.1.4" | sort  //Ascending

kubectl patch service kube-dns -n kube-system -p '{"spec":{"selector":{"k8s-app": "kube-dns"}}}'
kubectl get endpoints kube-dns -n kube-system

k -n dns-ns exec dns-rs-cka-4jjx2  -- nslookup kubernetes.default   
k -n dns-ns exec dns-rs-cka-4jjx2 -it -- nslookup kubernetes.default   // -it to provide shell 

k create ingress nginx-ingress-resource  --rule "/shop=nginx-service:80" --annotation=nginx.ingress.kubernetes.io/ssl-redirect="false". / exact

k create ingress nginx-ingress-resource  --rule "/shop*=nginx-service:80" --annotation=nginx.ingress.kubern.  //prefix *

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-app-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: my-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector: {} //same or other namespace 
    - podSelector:
        matchLabels:
         app: trusted
  egress:
  - to:
    - podSelector: {} //same or other namespace 

systemctl status kubelet.service
systemctl status kubelet
/var/lib/kubelet/config.yaml
/etc/kubernetes/kubelet.conf
clientCAFile: /etc/kubernetes/pki/CA.CERTIFICATE
Change it to clientCAFile: /etc/kubernetes/pki/ca.crt
systemctl daemon-reload
systemctl status kubelet


If there is issue in PV and PVC do the correction in PVC to match PV 
 volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
Event if the volumes not mount and there is issue in name or other then the status pod will be pending until the name is  corrected 


Taints: node-role.kubernetes.io/control-plane:NoSchedule
The taint does not have value not need operator and value flags 
tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        effect: "NoSchedule"
---
Note:
There are two special cases:
An empty key with operator Exists matches all keys, values and effects which means this will tolerate everything.
An empty effect matches all effects with key key1.

Three kinds of operators are admitted =,==,!=. The first two represent equality (and are synonyms), while the latter represents inequality. For example:
environment = production
tier != frontend
nodeSelector: vs nodeName
    accelerator: nvidia-tesla-p100
kubectl get pods -l environment=production,tier=frontend
kubectl get pods -l 'environment in (production),tier in (frontend)'

kubectl port-forward service/cka-service 8080:80
Success if get the below 
Forwarding from 127.0.0.1:8080 -> 80
Forwarding from [::1]:8080 -> 80

kubectl config view |  grep namespacenn.  / current namespace

k create secret generic db-secret --from-literal DB_Host=mysql-host --from-literal DB_User=root --from-literal DB_Password=dbpassword // secret generic NAME

/bin/bash same as bash
/bin/sh same as sh 

environment variable:
Export do='--dry-run -o yaml' 
$do
Export now='--grace-period 0 --force'
$now
