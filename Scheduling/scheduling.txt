

-------------------

Scheduling:
---

Manaul pod Scheduling - Optional

1. Assigning nodename on pod 
2. K replace --force -f nginx.yaml delete and create pod 
3. k replace --force -f nginx.yaml 

Note:

We cannot remove running pod from one node to another only you can delete pod from one node and recreate on anther. 

Node: <none>

spec:
  nodeName: node01
  containers:
  -  image: nginx
     name: nginx




ReplicaSet - Optional:
---
1. k get pods --selector env=dev
2. k get pods --selector env=dev --no-headers | wc -l
3. k get pods --selector bu=finance  --no-headers | wc -l
4. k get all --selector env=prod  --no-headers 
5. k get pods --selector bu=finance,env=prod,tier=frontend


Taints and Tolerations - Optional:
---
1. k get nodes
2. k describe node node01 
3. k taint -h
4. k taint node node01 spray=mortein:NoSchedule
5. k describe node node01 
6. k run bee --image=nginx --dry-run=client -o ymal
7. k run bee --image=nginx --dry-run=client -o yaml > bee.yaml
8. k get pods --watch
9. k taint node controlplane node-role.kubernetes.io/control-plane:NoSchedule-
10. k get pods mosquito -o wide

Note: we cannot add toleration to pod view command. To remove taint add - and the end of taint 
tolerations:
    - key: spray
      value: mortein
      effect: NoSchedule
      operator: Equal


Node Affinity - Optional:
---

1. k describe node node01
2. K label -h
3. k label node node01 color=blue
4. k create deployment blue --image=nginx --replicas=3
4. k describe node node01 | grep Taints
5. k describe node controlplane | grep Taints
6. k edit deployments blue
7. k get pdos -o wide
8. k create deployment red --image=nginx --replicas=2 --dry-run=client -o yaml > red.yam

Note: affinity come after spec before container and its pod level. 

    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
      containers:
      - image: nginx
        name: nginx
        resources: {}

---
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values:
                - blue
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx



Resource Limits - Optional:
---

1. k edit pod elephant 
2. k replace --force -f /tmp/kubectl-edit-4096856426.yaml

Note: cannot edit running pod but same the changes temprarly("/tmp/kubectl-edit-4096856426.yaml").
1. We can delete  and recreate pod
2. --force killed the existing pod and recreate (k replace --force -f /tmp/kubectl-edit-4096856426.yaml) 
Container = process running in memory 


DaemonSets  - Optional:
---

1. k get daemonsets -A 
2. k describe daemonsets -n kube-system kube-proxy 
3. k describe  ds -n kube-system kube-flannel-ds
4. k get ds
5. k create deployment elasticsearch --image registry.k8s.io/fluentd-elasticsearch:1.20 -n kube-system -o yaml  
6. k create deployment elasticsearch --image registry.k8s.io/fluentd-elasticsearch:1.20 -n kube-system --dry-run=client -o yaml > fluentd.yaml


Note: there is not create DaemonSet command. We create deployment then change the name to DaemonSet
Remove replicas. Strategy and status. DaemonSet does not have replica 

Static Pods: - Optional:
---

1. Static running by kubelet not cluster involve only kubelet
2. Node name will be at and appended to static pod 
3. staticPodPath: /etc/kubernetes/manifests - cat /var/lib/kubelet/config.yaml path configuration 
4. We can deploy 
5. --command should alway be at the end 
6. k get pod -n kube-system kube-apiserver-controlplane -o yaml
7. k get pods -A
9. cat /var/lib/kubelet/config.yaml to check static pod configuration 
10. at /etc/kubernetes/manifests/kube-apiserver.yaml
11. k run static-busybox --image=busybox --dry-run=client -o yaml --command -- sleep 1000  > static-busybox
12. vi /etc/kubernetes/manifests/static-busybox
13. k delete pod static-greenbox-node01 using this way will delete the static and will recreate not deleting permenantly 
14.  k get nodes -o wide
15. ssh 192.37.135.11
16. cat /var/lib/kubelet/config.yaml kubelet configuration file (staticPodPath: /etc/just-to-mess-with-you)
17. cd /etc/just-to-mess-with-you
18. rm greenbox.yaml 
19. exit one level
20. k get pods


Note: 
k get pod -n kube-system kube-apiserver-controlplane -o yaml
 ownerReferences:
  - apiVersion: v1
    controller: true
    kind: Node // owner is Node// static pod 

---
k get pod -n kube-system kube-apiserver-controlplane -o yaml
 ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: DaemonSet
    name: kube-proxy


staticPodPath: /etc/just-to-mess-with-you
What is the path of the directory holding the static pod definition files?
kubelet.config.k8s.io/v1beta1: kubelet create the pod 
staticPodPath: /etc/kubernetes/manifests thi dir that create the pod 


MULTIPLE SCHEDULERS - Optional:
---
1. k describe pod -n kube-system kube-scheduler-controlplane 
2. k get sa -n kube-system my-scheduler 
3. cat /root/my-scheduler-config.yaml 
4. k create configmap  my-scheduler-config --from-file=/root/my-scheduler-config.yaml -n kube-system 
5. k get configmaps  -n kube-system 
6. k describe pod -n kube-system kube-scheduler-controlplane | grep Image
7. k get pods -n kube-system
8. 


Note:
controlplane ~ âžœ  cat /root/my-scheduler-config.yaml 
apiVersion: kubescheduler.config.k8s.io/v1beta2
kind: KubeSchedulerConfiguration
profiles:
  - schedulerName: my-scheduler
leaderElection:
  leaderElect: false

---
spec:
  schdulerName: my-scheduler
  containers:
  - image: nginx
    name: nginx

















